# Static Server 数据验证规则

## 项目信息
@project: static-server
@path: /static-server/**
@framework: Koa2
@database: MongoDB

## Model 验证规则
@static-server/src/models/*.model.ts
- 必须定义 TypeScript 接口继承 Document
- 必须定义 Mongoose Schema
- 必须包含 timestamps 配置
- Schema 必须包含必要的验证规则

## Service 验证规则
@static-server/src/services/*.service.ts
- 必须实现标准的 CRUD 方法
- 必须包含适当的错误处理
- 必须使用 TypeScript 类型标注

## API 验证规则
@static-server/src/apis/*.api.ts
- 必须处理请求参数验证
- 必须实现错误处理
- 必须设置正确的响应状态码
- 必须使用 TypeScript 类型标注

## 中间件验证规则
@static-server/src/middlewares/*.middleware.ts
- 必须是标准的 Koa 中间件函数
- 必须处理错误并传递给下一个中间件
- 必须使用 TypeScript 类型标注

## 示例
### Schema 验证
```typescript
const {{name}}Schema = new Schema({
    name: {
        type: String,
        required: [true, '名称是必需的'],
        trim: true
    },
    description: {
        type: String,
        default: ''
    }
}, {
    timestamps: true,
    versionKey: false
});

// 添加验证中间件
{{name}}Schema.pre('save', function(next) {
    // 自定义验证逻辑
    next();
});
```

### 错误处理中间件
```typescript
export async function errorHandler(ctx: Context, next: Next) {
    try {
        await next();
    } catch (err) {
        ctx.status = err.status || 500;
        ctx.body = {
            success: false,
            message: err.message || '服务器内部错误',
            error: process.env.NODE_ENV === 'development' ? err : undefined
        };
        ctx.app.emit('error', err, ctx);
    }
}
```

### 参数验证
```typescript
import { Context } from 'koa';

export async function validateBody(ctx: Context, next: Next) {
    const body = ctx.request.body;
    
    if (!body.name) {
        ctx.throw(400, '名称是必需的');
    }
    
    if (body.name.length < 2) {
        ctx.throw(400, '名称长度必须大于2个字符');
    }
    
    await next();
}
``` 